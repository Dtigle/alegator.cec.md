@using CEC.Web.SRV.Infrastructure.Grids
@using CEC.Web.SRV.Models.Address
@using CEC.Web.SRV.Resources
@using Lib.Web.Mvc.JQuery.JqGrid

@{
    ViewBag.Title = MUI.StreetTypes_TabTitle;
}

@{
    var grid = Html.GridOptions<AddressBuildingsGridModel>("addresses")
        .SetOptions(x =>
        {
            x.MultiSelect = true;
            x.ColumnsRemaping = new List<int> { 7, 8, 9, 3, 2, 1, 4, 5, 6, 10, 11, 12 };
        })
        .BuildGrid(Url.Action("ListAddressesBuildingsAjax"),
            deleteAction: null,
            addAction: null,
            editAction: null,
            unDeleteAction: Url.Action("UnDeleteAddress", "Address"),
            historyAction: Url.Action("AddressHistory", "History"),
            exportAction: Url.Action("ExportAddresses"))
        .Navigator(new JqGridNavigatorOptions()
        {
            Add = true,
            Edit = true,
            Delete = true,
            CloneToTop = true,
            AddFunction = "$.AddBuilding",
            EditFunction = "$.EditBuilding",
            DeleteFunction = "$.DeleteAddress"
        })
        .AddNavigatorButton(MUI.Address_ChangePollingStation, onClick: "changePollingStation")
        .AddNavigatorButton(MUI.Address_Geolicalization, onClick: "setGeolocation");
}

@grid.GetHtml()


<div class="contextMenu" id="myMenu1" style="display:none">
    <ul style="width: initial !important">
	    <li id="adjustmentAddresses" onclick=adjustmentAddresses()>
		    <span class="fa fa-pencil-square-o" style="float:left"></span>
		    <span style="font-size:11px; font-family:Verdana; padding-left: 10px;"> @MUI.Address_AdjustmentAddresses</span>
	    </li>
		 <li id="changePollingStation" onclick=changePollingStation()>
		    <span class="fa fa-pencil-square" style="float:left"></span>
		    <span style="font-size:11px; font-family:Verdana; padding-left: 10px;" > @MUI.Address_ChangePollingStation</span>
	    </li>
	    <li id="setGeolocation" onclick=setGeolocation()>
		    <span class="fa fa-map-marker" style="float:left"></span>
		    <span style="font-size:11px; font-family:Verdana; padding-left: 10px;" > @MUI.Address_Geolicalization</span>
	    </li>
	    <li style="display: block !important;height: 1px;width: 100%;margin: 10px;background: gainsboro !important;padding:1px !important;"></li>
	    <li id="addBuilding"  onclick=$.AddBuilding()>
		    <span class="fa  fa-plus" style="float:left"></span>
		    <span style="font-size:11px; font-family:Verdana; padding-left: 10px;"> @MUI.Address_Add</span>
	    </li>
	    <li id="editBuilding" onclick=$.EditBuilding()>
		    <span class="fa fa-pencil" style="float:left"></span>
		    <span style="font-size:11px; font-family:Verdana; padding-left: 10px;"> @MUI.Address_Edit</span>
	    </li>
		 <li id="deleteAddress" onclick=$.DeleteAddress()>
		    <span class="fa fa-trash-o" style="float:left"></span>
		    <span style="font-size:11px; font-family:Verdana; padding-left: 10px;" > @MUI.Address_Delete</span>
	    </li>
    </ul>
</div>

<script type="text/javascript">

	$(document).ready(function() {
		@grid.GetJavaScript();

		$.getScript('https://maps.google.com/maps/api/js?sensor=false&callback=OpenLayersMap');
	    
		var grid = $('#addresses');
		grid.contextMenu('myMenu1', {
			onContextMenu: function (e) {
				var rowId = $(e.target).closest("tr.jqgrow").attr("id");
				if (!rowId) {
					return false; 
				}
				if (!$('#addresses tr[id =' + rowId + '] td:eq(0) :checkbox').prop('checked')) {
					grid.jqGrid('setSelection', rowId);
				}
				return true;
			}
		});
	});

	function getVal(value, options) {
		//var showedElement = $('<input role="textbox" class="editable ui-autocomplete-input" style="width: 98%;" type="text" id="' + options.id + '" name="' + options.name + '">');
		var showedElement = $('<input role="textbox" class="editable ui-autocomplete-input" style="width: 98%;" type="text" id="' + options.id + '">');
		var hiddenInput = $('<input type="hidden" id="' + options.id + '_hidden" name="' + options.name + '">');

		showedElement.val(value);

		$(showedElement).autocomplete({
			source: options.dataUrl,
			autoFocus: true,
			select: function (event, ui) {
				$(showedElement).val(ui.item.StreetName);
				$(hiddenInput).val(ui.item.StreetId);
				return false;
			}
		})
			.data("ui-autocomplete")
			._renderItem = function (ul, item) {
				if (item === undefined) {
					return ul;
				}
				return $("<li>")
					.data("item.autocomplete", item)
					.append("<a>" + item.StreetName + "</a>")
					.appendTo(ul);
			};
		var div = $('<div>')
			//.attr('id', options.name)
			.append(showedElement)
			.append(hiddenInput);
		return div;
	}

	function setGeolocation() {
		hideContextMenu();
		var selections = $("#addresses").jqGrid('getGridParam', 'selarrrow');

		if (selections == null || selections.length == 0) {
			BootstrapDialog.alert({ message: '@MUI.StreetsNotSelectedAlertMessage', title: '@MUI.DialogTitle_Information' });
			return;
		}
		if (selections.length > 1) {
			BootstrapDialog.alert({ message: '@MUI.TooManyRecordsSelected', title: '@MUI.DialogTitle_Information' });
			return;
		}

		var url = '@Url.Action("UpdateGeolocation", "Address")';
		var dialogTitle = '@MUI.SetGeolocationAdd_DialogTitle';

		$.openDialog($(this), {
			url: url + '?id=' + selections,
			draggable: false,
			title: dialogTitle,
			onShown: function (dialog) {
				$.renderMap();
			},
			onBeforeSubmit: function (form) {
				var latitude = form.find('#Geolatitude');
				var longitude = form.find('#Geolongitude');
				var valid = latitude.val() != "" && longitude.val() != "";
				if (!valid) {
					BootstrapDialog.alert({ message: 'Coordonatele nu sunt selectate', title: '@MUI.DialogTitle_Information' });
				}
				return valid;
			},
			onSubmit: function () {
				$("#addresses").trigger('reloadGrid');
			}
		});
	}

	function changePollingStation() {
		var selections = $("#addresses").jqGrid('getGridParam', 'selarrrow');
		if (selections == null || selections.length == 0) {
			BootstrapDialog.alert({ message: '@MUI.Address_NothingSelected', title: '@MUI.DialogTitle_Information' });
			return;
		}

		var url = '@Url.Action("ChangePollingStation")';
		var dialogTitle = '@MUI.ChangePollingStation_DialogTitle';
		var regionId = GetTreeSelections();
		$.openDialog($(this), {
			url: url + '?regionId=' + regionId,
			title: dialogTitle,
			onContentLoad: function (submitForm) {
				for (var i = 0; i < selections.length; i++) {
					submitForm.append($('<input type="hidden" />').attr('name', 'Addresses[' + i + ']').val(selections[i]));
				}
				$('.lblCounter', submitForm).text(selections.length);
			},
			onSubmit: function () {
				$("#addresses").trigger('reloadGrid');
			}
		});
	}

	$.renderMap = function () {
		var url = '@Url.Action("GetLocation", "Address")';
		var regionId = GetTreeSelections();
		var adressId = GetGridSelections();
		$.ajax({
			type: "POST",
			url: url,
			dataType: 'json',
			data: { regionId: regionId, adressId: adressId },
			success: function (data) {
				var lat = 47.0;
				var lon = 29.0;
				var zoomLevel = null;
				var isLocation = false;

				if (data.AdressGeoData == null && data.RegionGeoData != null) {
					lat = data.RegionGeoData.Latitude;
					lon = data.RegionGeoData.Longitude;
					zoomLevel = 12;
				} else if (data.AdressGeoData != null) {
					lat = data.AdressGeoData.Latitude;
					lon = data.AdressGeoData.Longitude;
					zoomLevel = 17;
					isLocation = true;
				}

				var osmap1 = new OpenLayers.Layer.OSM("OpenStreetMap");
				var map2_layers = [osmap1];
				var map2 = drawMap(lon, lat, "map-2", map2_layers, zoomLevel, isLocation);
				$("#map-2").resize(function () {
					setTimeout(map2.updateSize(), 300);
				});
			}
		});
	};

	function GetGridSelections() {
		var selections = $("#addresses").jqGrid('getGridParam', 'selrow');
		return selections;
	}

	function GetTreeSelections() {
		var selections = $("#regionsGrid").jqGrid('getGridParam', 'selrow');
		return selections;
	}

	function OpenLayersMap() {
		//LoadOpenLayersScript();
	}
    
	function adjustmentAddresses() {
		hideContextMenu();
		var selections = $("#addresses").jqGrid('getGridParam', 'selarrrow');
	    
		if (selections.length > 1) {
			BootstrapDialog.alert({ message: '@MUI.TooManyRecordsSelected', title: '@MUI.DialogTitle_Information' });
			return;
		}

		var url = '@Url.Action("AdjustmentAddresses")';
		var dialogTitle = '@MUI.Address_AdjustmentAddresses';
		var addressId = GetGridSelections();
		$.openDialog($(this), {
			url: url + '?addressId=' + addressId,
			title: dialogTitle,
			onSubmit: function () {
				$("#addresses").trigger('reloadGrid');
			},
		});
	}
    
	function hideContextMenu() {
		$("#jqContextMenu").hide();
		$("#jqShadow").hide();
	}
</script>
